//FROM https://nolambda.stream/posts/jacoco-setup-for-multi-module-project/
def coveredProject = subprojects

apply plugin: 'jacoco'

configure(coveredProject) { prj ->
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.8.5"
    }

    task jacocoReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
        group = 'Reporting'
        description = 'Generate Jacoco coverage'

        reports {
            csv.enabled = true
            xml.enabled = false
            html.enabled = true
        }

        final fileFilter = ['android/*',
                            'com/android/*',
                            '**/fragment/*',
                            '**/*Application*',
                            '**/*Activity*',
                            '**/*Adapter*',
                            '**/*Fragment*',
                            '**/*ViewHolder*',
                            '**/*View*',
                            '**/R$*.class',
                            '**/BuildConfig.*',
                            '**/R.class',
                            '**/R$*.class',
                            '**/Manifest*.*',
                            '**/*Test*.*',
                            'android/**/*.*',
                            '**/*Glide*',
                            '**/bumptech/**',
                            '**/AppModule*.*',
                            '**/databinding/*',
                            '**/*DataBind*',
                            '**/core/ui/*',
        ]

        final kotlinTree = fileTree(dir: "${prj.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
        final javacTree = fileTree(dir: "${prj.buildDir}/intermediates/javac/debug", excludes: fileFilter)
        final mainSrc = "${prj.projectDir}/src/main/java"

        sourceDirectories.setFrom files([mainSrc])
        classDirectories.setFrom files([kotlinTree, javacTree])
        executionData.setFrom fileTree(dir: prj.buildDir, includes: [
                'jacoco/testDebugUnitTest.exec',
                'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec'
        ])
    }
}

/**
 *  Root task that generates an aggregated Jacoco test coverage report for all sub-projects
 */
task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    group = 'Reporting'
    description = 'Generates an aggregate report from all subprojects'

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        ignoreFailures true
    }

    def projects = coveredProject

    //noinspection GrUnresolvedAccess
    dependsOn(projects.jacocoReport)

    final source = files(projects.jacocoReport.sourceDirectories)

    additionalSourceDirs.setFrom source
    sourceDirectories.setFrom source

    classDirectories.setFrom files(projects.jacocoReport.classDirectories)
    executionData.setFrom files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination file('build/reports/jacoco/html')
        }
        csv {
            enabled true
            destination file('build/reports/jacoco/jacocoFullReport.csv')
        }
        xml {
            enabled true
            destination file('build/reports/jacoco/jacocoFullReport.xml')
        }
    }

    doFirst {
        //noinspection GroovyAssignabilityCheck
        executionData.setFrom files(executionData.findAll { it.exists() })
    }
}